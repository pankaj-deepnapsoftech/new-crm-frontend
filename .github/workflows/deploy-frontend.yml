name: Deploy Frontend to VPS (Apache)

on:
  push:
    branches:
      - main

env:
  REMOTE_PATH: /var/www/subscription.deepnapsoftech.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show repo layout (debug)
        shell: bash
        run: |
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          echo "Top-level files:"
          ls -la

      - name: Detect frontend folder
        id: detect
        shell: bash
        run: |
          # default to repo root
          if [ -f "./frontend/package.json" ]; then
            echo "path=frontend" >> "$GITHUB_OUTPUT"
          elif [ -f "./package.json" ] && grep -qE '"(react-scripts|vite|next|@vue|svelte)"' package.json 2>/dev/null; then
            echo "path=." >> "$GITHUB_OUTPUT"
          else
            # fallback: if folder named 'app' or 'web' exist, try frontend there
            if [ -f "./app/package.json" ]; then
              echo "path=app" >> "$GITHUB_OUTPUT"
            elif [ -f "./web/package.json" ]; then
              echo "path=web" >> "$GITHUB_OUTPUT"
            else
              echo "path=frontend" >> "$GITHUB_OUTPUT"
            fi
          fi
          echo "Detected frontend path: ${{ steps.detect.outputs.path }}" || true

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install & Build frontend (from detected folder)
        shell: bash
        env:
          FRONTEND_DIR: ${{ steps.detect.outputs.path }}
        run: |
          echo "Frontend dir: $FRONTEND_DIR"
          if [ "$FRONTEND_DIR" != "." ]; then
            cd "$FRONTEND_DIR" || (echo "cd to $FRONTEND_DIR failed" && exit 1)
          fi

          echo "Node version:"
          node -v || true
          echo "NPM version:"
          npm -v || true

          if [ ! -f package.json ]; then
            echo "No package.json found in $PWD"
            ls -la
            exit 1
          fi

          echo "Installing dependencies..."
          npm ci --silent

          echo "Running build..."
          # Support common build commands
          if grep -q "\"build\"" package.json; then
            npm run build --if-present
          else
            echo "No build script found in package.json"
            exit 1
          fi

          echo "Build finished. Build dir listing (pwd):"
          ls -la

      - name: Prepare SSH key on runner
        shell: bash
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # add VPS to known_hosts (avoid interactive prompt)
          if ! ssh-keygen -F "${{ secrets.VPS_IP }}" >/dev/null 2>&1; then
            ssh-keyscan -H "${{ secrets.VPS_IP }}" >> ~/.ssh/known_hosts || true
          fi

      - name: Rsync build to VPS (over SSH)
        shell: bash
        env:
          FRONTEND_DIR: ${{ steps.detect.outputs.path }}
          REMOTE_PATH: ${{ env.REMOTE_PATH }}
        run: |
          PORT="${{ secrets.VPS_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi

          # determine local build output dir (build/ for CRA, dist/ for Vite)
          if [ "$FRONTEND_DIR" = "." ]; then
            SRC_BASE="$PWD"
          else
            SRC_BASE="$PWD/$FRONTEND_DIR"
          fi

          if [ -d "$SRC_BASE/build" ]; then
            SRC="$SRC_BASE/build/"
          elif [ -d "$SRC_BASE/dist" ]; then
            SRC="$SRC_BASE/dist/"
          else
            echo "Could not find build output directory (build/ or dist/) under $SRC_BASE"
            echo "Listing $SRC_BASE:"
            ls -la "$SRC_BASE"
            exit 1
          fi

          echo "Rsync from $SRC -> ${ { secrets.VPS_USER } }@${{ secrets.VPS_IP }}:${REMOTE_PATH}"
          # rsync options: archive, compress, verbose, delete removed files
          RSYNC_OPTS="-az --delete --omit-dir-times --no-perms --no-owner --no-group"

          rsync $RSYNC_OPTS -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes -p $PORT" \
            "$SRC" "${{ secrets.VPS_USER }}"@"${{ secrets.VPS_IP }}":"${REMOTE_PATH}"/

      - name: Fix permissions & reload Apache (remote)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            # ensure ownership so Apache can read files
            sudo chown -R www-data:www-data /var/www/subscription.deepnapsoftech.com || true
            sudo find /var/www/subscription.deepnapsoftech.com -type d -exec chmod 755 {} \; || true
            sudo find /var/www/subscription.deepnapsoftech.com -type f -exec chmod 644 {} \; || true

            # test apache config and reload (safe)
            sudo apache2ctl configtest || true
            sudo systemctl reload apache2 || sudo service apache2 reload || true

            echo "Remote folder listing (top):"
            ls -la /var/www/subscription.deepnapsoftech.com | sed -n '1,200p'
