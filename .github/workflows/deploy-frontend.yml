name: Deploy Frontend to VPS (Apache)

on:
  push:
    branches:
      - main

env:
  REMOTE_PATH: /var/www/subscription.deepnapsoftech.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # expose secrets as job env variables to use safely in shell
    env:
      VPS_IP: ${{ secrets.VPS_IP }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_PORT: ${{ secrets.VPS_PORT }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      REMOTE_PATH: ${{ env.REMOTE_PATH }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show repo layout (debug)
        shell: bash
        run: |
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          echo "Top-level files:"
          ls -la

      - name: Detect frontend folder
        id: detect
        shell: bash
        run: |
          if [ -f "./frontend/package.json" ]; then
            echo "path=frontend" >> "$GITHUB_OUTPUT"
          elif [ -f "./package.json" ] && grep -qE '"(react-scripts|vite|next|@vue|svelte)"' package.json 2>/dev/null; then
            echo "path=." >> "$GITHUB_OUTPUT"
          elif [ -f "./app/package.json" ]; then
            echo "path=app" >> "$GITHUB_OUTPUT"
          elif [ -f "./web/package.json" ]; then
            echo "path=web" >> "$GITHUB_OUTPUT"
          else
            # fallback to frontend even if missing (will error later with readable message)
            echo "path=frontend" >> "$GITHUB_OUTPUT"
          fi
          echo "detected frontend path = ${{ steps.detect.outputs.path }}" || true

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install & Build frontend (from detected folder)
        shell: bash
        env:
          FRONTEND_DIR: ${{ steps.detect.outputs.path }}
        run: |
          echo "Frontend dir: $FRONTEND_DIR"
          if [ "$FRONTEND_DIR" != "." ]; then
            cd "$FRONTEND_DIR" || (echo "cd to $FRONTEND_DIR failed" && exit 1)
          fi

          if [ ! -f package.json ]; then
            echo "ERROR: no package.json found in $PWD"
            ls -la
            exit 1
          fi

          npm ci --silent
          npm run build --if-present

          echo "Build completed. Showing build/dist (if present):"
          [ -d build ] && ls -la build || true
          [ -d dist ] && ls -la dist || true

      - name: Prepare SSH key on runner
        shell: bash
        run: |
          mkdir -p ~/.ssh
          # write private key from job env (exposed from secret)
          printf '%s\n' "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # add VPS to known_hosts to avoid interactive prompt
          if [ -n "$VPS_IP" ]; then
            if ! ssh-keygen -F "$VPS_IP" >/dev/null 2>&1; then
              ssh-keyscan -H "$VPS_IP" >> ~/.ssh/known_hosts || true
            fi
          else
            echo "WARNING: VPS_IP is empty"
          fi

      - name: Rsync build to VPS (over SSH)
        shell: bash
        env:
          FRONTEND_DIR: ${{ steps.detect.outputs.path }}
          VPS_IP: ${{ env.VPS_IP }}
          VPS_USER: ${{ env.VPS_USER }}
          VPS_PORT: ${{ env.VPS_PORT }}
          REMOTE_PATH: ${{ env.REMOTE_PATH }}
        run: |
          # default port if not set
          if [ -z "$VPS_PORT" ]; then
            VPS_PORT=22
          fi

          if [ "$FRONTEND_DIR" = "." ]; then
            SRC_BASE="$PWD"
          else
            SRC_BASE="$PWD/$FRONTEND_DIR"
          fi

          if [ -d "$SRC_BASE/build" ]; then
            SRC="$SRC_BASE/build/"
          elif [ -d "$SRC_BASE/dist" ]; then
            SRC="$SRC_BASE/dist/"
          else
            echo "ERROR: Could not find build output directory (build/ or dist/) under $SRC_BASE"
            ls -la "$SRC_BASE"
            exit 1
          fi

          echo "Starting rsync from: $SRC"
          echo "Rsync target: $VPS_USER@$VPS_IP:$REMOTE_PATH (port $VPS_PORT)"

          RSYNC_OPTS="-az --delete --omit-dir-times --no-perms --no-owner --no-group"

          rsync $RSYNC_OPTS -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes -p $VPS_PORT" \
            "$SRC" "$VPS_USER"@"$VPS_IP":"$REMOTE_PATH"/

      - name: Fix permissions & reload Apache (remote)
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ env.VPS_IP }}
          username: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.VPS_PORT || '22' }}
          script: |
            sudo chown -R www-data:www-data /var/www/subscription.deepnapsoftech.com || true
            sudo find /var/www/subscription.deepnapsoftech.com -type d -exec chmod 755 {} \; || true
            sudo find /var/www/subscription.deepnapsoftech.com -type f -exec chmod 644 {} \; || true
            sudo apache2ctl configtest || true
            sudo systemctl reload apache2 || sudo service apache2 reload || true
            echo "Remote folder listing:"
            ls -la /var/www/subscription.deepnapsoftech.com | sed -n '1,200p'
